{"files":[{"id":"58c00df1-5bbf-44c9-9ad3-896070ad946f","name":"Code","type":"server_js","source":"/*\n* things to consider:\n*    1. using SiteApp api to create and update user\u0027s reader-card page.\n*    2. implementing more query types [borrowed by user, borrowed from user, etc].\n*/\n\n\n/**\n* after giving it some consideration i will change the database to hold the following structures:\n*       1. bookshelves \u003d\u003e {type: \"bookshelf\", owner: [user email address], instances[]: [books by instance id], books[]: [books by generic id], name: [chosen display name]}\n*       2. generics books \u003d\u003e {type: \"book#generic\", gbid: [googlebooks id], title: [book title], authors[]: [list of authors], category: [book category],\n*                                    description: [book decription], isbn: [book isbn], pages: [number of pages], language: [language in two letters code],\n*                                    cover{}: [url addresses to book cover image in different sizes], instances[]: [list of book instances in db], date: [date added]}\n*       3. book instances \u003d\u003e {type: \"book#instance\", id: [generic id], owner: [user owning the book], holder: [user currently holding the book], queue: [readers who ordered the book]}\n*       4. book categories \u003d\u003e {type: \"list#categories\", list[]: [list of categories]}\n*\n* i switched all login to work with ScriptDb id. seems to work fine.\n* needs to implement functions to return actual objects from database..id\n*/\n\n\n/**\n* get actual object by database id.\n*/\nfunction getObjectById(id) {\n  var obj;\n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  obj \u003d db.load(id);\n  if (obj) { return obj; }\n  \n  db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n  obj \u003d db.load(id);\n  if (obj) { return obj; }\n  \n  db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n  obj \u003d db.load(id);\n  if (obj) { return obj; }\n  \n  db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"list\");\n  obj \u003d db.load(id);\n  if (obj) { return obj; }\n  \n  return null;\n}\n\nfunction getBookByGBId(id) {\n  //  var db \u003d ScriptDb.getMyDb();\n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  var query \u003d db.query({gbid:id});\n  if (query.hasNext()) {\n    return query.next(); \n  } else { return null; }\n}\n\nfunction addByIsbn(isbn) {\n  var book \u003d QueryGoogleBooks.query(isbn);\n  \n  return addNewBook(book);\n}\n\n/**\n* adds a new book to the database, owned and held by the user.\n*/\nfunction addNewBook(e) {\n  if (e \u003d\u003d null || e.isbn \u003d\u003d null) {return null}\n  \n//  var db \u003d ScriptDb.getMyDb();  \n  var db_gen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  var db_inst \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n  var db_shelf \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n  convertUser();\n  var user \u003d PropertiesService.getUserProperties().getProperty(\u0027id\u0027);\n  \n  var book \u003d e;\n  var gbidCheck \u003d db_gen.query({gbid: book.gbid});\n  if (book.id \u003d\u003d null \u0026\u0026 !gbidCheck.hasNext()) {\n//    book.type \u003d \"book#generic\";\n    book.instances \u003d [];\n    book.date \u003d (new Date()).getTime();\n    book \u003d db_gen.save(book);\n    addCategory(book.category); \n  }\n  \n  if (book.type \u003d\u003d null \u0026\u0026 gbidCheck.hasNext()) {\n    book \u003d gbidCheck.next();\n  }\n  \n  var instance \u003d {\n//    type: \"book#instance\",\n    generic: book.getId(),\n    owner: user,\n    holder: user,\n    queue: []\n  }\n  instance \u003d db_inst.save(instance);\n\n  book.instances.push(instance.getId());\n  book \u003d db_gen.save(book);\n  \n  var bookshelf \u003d db_shelf.load(user);\n  bookshelf.instances.push(instance.getId());\n  var add \u003d true;\n  for (var i \u003d 0 ; i \u003c bookshelf.books.length ; i++) {\n    if (bookshelf.books[i] \u003d\u003d book.getId()) { \n      add \u003d false;\n    }\n  }\n  if (add) {\n    bookshelf.books.push(book.getId());\n  }\n  bookshelf \u003d db_shelf.save(bookshelf);\n  \n  return book;\n}\n\n/**\n* updating a book. must recieve original book object as produced from getObjectById.\n*/\nfunction updateBook(book) {\n  Logger.log(\"updating book \");\n  Logger.log(book.getId());\n  \n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  \n  var catOut \u003d db.load(book.getId()).category;\n  Logger.log(catOut);\n  \n  try {\n  book \u003d db.save(book);\n  Logger.log(\"book updated\");\n  } catch (error) {\n    Logger.log(\"error updating\");\n    Logger.log(error);\n  }\n  deleteCategory(catOut);\n  addCategory(book.category);\n  \n  Logger.log(\"done\");\n  return book;\n}\n\nfunction revertToGoogleData(id) {\n//  var db \u003d ScriptDb.getMyDb();\n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  var book \u003d db.load(id);\n  var original \u003d QueryGoogleBooks.getByGBId(book.gbid);\n  book.title \u003d original.title;\n  book.subtitle \u003d original.subtitle;\n  book.authors \u003d original.authors;\n  var catOut \u003d book.category;\n  book.description \u003d original.description;\n  book.pages \u003d original.pages;\n  \n  if (book.cover \u0026\u0026 original.cover) {\n    book.cover.thumbnail \u003d original.cover.thumbnail;\n    book.cover.smallThumbnail \u003d original.cover.smallThumbnail;\n  }\n  \n  book.language \u003d original.language;\n  book.gbid \u003d original.gbid;\n  book.isbn \u003d original.isbn;\n  book \u003d db.save(book);\n  deleteCategory(catOut);\n  addCategory(original.category);\n  return book;\n}\n\n/**\n* adds a new category to the category list if such category does not exist.\n*/\nfunction addCategory(category) {\n//  var db \u003d ScriptDb.getMyDb();  \n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"list\");\n  \n  if (category \u003d\u003d null) {\n    return 0; \n  }\n  \n  //  if (db.query({type: \"list#categories\"}).getSize() \u003d\u003d 0) {\n  \n  if (PropertiesService.getScriptProperties().getProperty(\"categories\") \u003d\u003d null) {\n    var id \u003d db.save({type: \"categories\", list: [category]}).getId(); \n    PropertiesService.getScriptProperties().setProperty(\"categories\", id);\n    return 1;\n  }\n  var categories \u003d db.load(PropertiesService.getScriptProperties().getProperty(\"categories\"));\n  for (var i \u003d 0 ; i\u003ccategories.list.length ; i++) {\n    if (categories.list[i] \u003d\u003d category) {\n      return 0;\n    }\n  }\n  categories.list.push(category);\n  categories.list \u003d categories.list.sort();\n  db.save(categories);\n  return 1;\n}\n\n/**\n* checks if there are books in category. if no books left deletes that category.\n*/\nfunction deleteCategory(catOut) {\n//  var db \u003d ScriptDb.getMyDb();\n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"list\");\n\n  if (PropertiesService.getScriptProperties().getProperty(\"categories\") \u003d\u003d null) {\n    return; \n  }\n  var categories \u003d db.load(PropertiesService.getScriptProperties().getProperty(\"categories\"));\n  //  Logger.log(categories);\n  // if there are no more books in catOut, delete it from list.\n  //  Logger.log(getBooksInCategory(catOut));\n  if (getBooksInCategory(catOut).length \u003d\u003d 0) {\n    //      Logger.log(categories);\n    for (var i \u003d 0; i \u003c categories.list.length ; i++) {\n      if (categories.list[i] \u003d\u003d catOut) {\n        var tmp \u003d categories.list[0];\n        categories.list[0] \u003d categories.list[i];\n        categories.list[i] \u003d tmp;\n        categories.list.shift();\n        categories.list \u003d categories.list.sort();\n        db.save(categories);\n        break;\n      }\n    }\n  }\n}\n\n/**\n* adds a new bookshelf and a new user to the database.\n*/\nfunction addBookshelf(name) {\n  //  var user \u003d Session.getEffectiveUser().getEmail();\n  var props \u003d PropertiesService.getUserProperties();\n  convertUser();\n  var user \u003d props.getProperty(\u0027id\u0027);\n  \n  if (/*db.query({type: \"bookshelf\", owner: user}).getSize() \u003d\u003d 0*/ user \u003d\u003d null){\n    var bookshelf \u003d {\n      owner: Session.getEffectiveUser().getEmail(),\n      name: name,\n      converted: 1,\n      books: [],\n      instances: []\n    };\n//    var db \u003d ScriptDb.getMyDb();\n    var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n    bookshelf \u003d db.save(bookshelf);\n    props.setProperty(\u0027id\u0027, bookshelf.getId());\n    props.setProperty(\u0027converted\u0027, 1);\n    return 1;\n  }\n  return 0;\n}\n\n\n/**\n* returns an array of all book instances owned by a user. represented by instance id.\n*/\nfunction booksInBookshelf(id) {\n//  var db \u003d ScriptDb.getMyDb();\n  var dbShelf \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n  var dbGen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  var books \u003d [];  \n  var bookshelf \u003d dbShelf.load(id);\n  \n  for (var i \u003d 0 ; i \u003c bookshelf.books.length ; i++) {\n    books.push(dbGen.load(bookshelf.books[i]));\n  }\n  Logger.log(\"books queried\");\n  return books;\n}\n\n\n/**\n* returns an array of all books in a given catagory. represented by generic id.\n*/\nfunction getBooksInCategory(category) {\n//  var db \u003d ScriptDb.getMyDb();\n//  var db_categories \u003d ParseDb.getMyDb(applicationId, restApiKey, \"list_categories\");\n  var db_gen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  \n  var books \u003d [];\n  \n  var query \u003d db_gen.query({});\n  while (query.hasNext()) {\n    var book \u003d query.next();\n    if (category \u003d\u003d \"\" || category \u003d\u003d null || book.category \u003d\u003d category) {\n      books.push(book); \n    }\n  }\n  \n  return books;\n}\n\n\n/**\n* returns an array of all owners of a certain book, given by generic id. represented by user instance id.\n*/\nfunction getBookOwners(bookId) {\n//  var db \u003d ScriptDb.getMyDb();\n  var db_gen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  var db_inst \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n  var book \u003d db_gen.load(bookId);\n  \n  if (book \u003d\u003d null) {\n    return null; \n  }\n  var instances \u003d book.instances;\n  var owners \u003d [];\n  for (var i \u003d 0 ; i \u003c instances.length ; i++) {\n    owners.push(db_inst.load(instances[i]).owner);\n  }\n  \n  return owners;\n}\n\n\n/**\n* changes a book\u0027s, given by local id, location to user.\n*/\nfunction takeBook(bookId) {\n  //  var user \u003d Session.getEffectiveUser().getEmail();\n  convertUser();\n  var user \u003d PropertiesService.getUserProperties().getProperty(\u0027id\u0027);\n//  var db \u003d ScriptDb.getMyDb();\n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n  \n  var book \u003d db.load(bookId);\n  if (book !\u003d null) {  \n    book.holder \u003d user;\n    db.save(book);\n    return 1;\n  }\n  \n  return 0;\n}\n\n\n/**\n* removes a book, given by local id, from database completely.\n*/\nfunction removeBook(bookId) {\n//  var db \u003d ScriptDb.getMyDb();\n  Logger.log(\"removing \"+bookId);\n  var db_inst \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n  var db_gen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n//  var db_cat \u003d ParseDb.getMyDb(applicationId, restApiKey, \"list_categories\");\n  var db_shelf \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n  \n  var book \u003d db_inst.load(bookId);\n  \n  if (book !\u003d null){\n    var generic \u003d db_gen.load(book.generic);\n    var bookshelf \u003d db_shelf.load(book.owner);\n    \n    for (var i \u003d 0; i \u003c bookshelf.instances.length; i++) {\n      if (bookshelf.instances[i] \u003d\u003d bookId) {\n        var tmp \u003d bookshelf.instances[0];\n        bookshelf.instances[0] \u003d bookshelf.instances[i];\n        bookshelf.instances[i] \u003d tmp;\n        bookshelf.instances.shift();\n        break;\n      }\n    }\n    \n    var wasLast \u003d true;\n    for (var i \u003d 0; i \u003c bookshelf.instances.length; i++) {\n      if (db_inst.load(bookshelf.instances[i]).generic \u003d\u003d generic.getId()) {\n        wasLast \u003d false;\n      }\n    }\n    if (wasLast) {\n      for (var i \u003d 0 ; i \u003c bookshelf.books.length ; i++) {\n        if (bookshelf.books[i] \u003d\u003d generic.getId()) {\n          var tmp \u003d bookshelf.books[0];\n          bookshelf.books[0] \u003d bookshelf.books[i];\n          bookshelf.books[i] \u003d tmp;\n          bookshelf.books.shift();\n          break;\n        }\n      }\n    }\n    db_shelf.save(bookshelf);\n    \n    \n    for (var i \u003d 0; i \u003c generic.instances.length; i++) {\n      if (generic.instances[i] \u003d\u003d bookId) {\n        var tmp \u003d generic.instances[0];\n        generic.instances[0] \u003d generic.instances[i];\n        generic.instances[i] \u003d tmp;\n        generic.instances.shift();\n        break;\n      }\n    }\n    \n    if (generic.instances.length \u003e 0) {\n      db_gen.save(generic);\n    } else {\n      \n      db_gen.remove(generic) ;\n      \n      var category \u003d generic.category;\n      deleteCategory(category);\n    }\n    \n    db_inst.remove(book);\n    \n    return 1;\n  }\n  \n  return 0;\n}\n\n\n/**\n* get owner, given by user id, name as registered in the db.\n*/\nfunction getOwnerName(id) {\n//  var db \u003d ScriptDb.getMyDb();\n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n  \n  var user \u003d db.load(id);\n  \n  if (user !\u003d null) {\n    return user.name;\n  }\n  \n  return null;\n}\n\n/**\n* get book instances.\n*/\nfunction getBookInstances(id) {\n//  var db \u003d ScriptDb.getMyDb();\n  var dbGen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  var dbInst \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n  \n  var book \u003d  dbGen.load(id);\n  \n  var instances \u003d [];\n  for (var i \u003d 0 ; i \u003c book.instances.length ; i++) {\n    instances.push(dbInst.load(book.instances[i])) ;\n    Logger.log(book.instances[i]);\n  }\n  \n  return instances;\n}\n\n/**\n* deletes active user and bookshelf.\n*/\nfunction removeBookshelf() {\n  convertUser();\n  var user \u003d PropertiesService.getUserProperties();\n  var id \u003d user.getProperty(\u0027id\u0027)\n  if (id !\u003d null) {\n//    var db \u003d ScriptDb.getMyDb();\n    var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n    var bookshelf \u003d db.load(id);\n    //    db.removeByIdBatch(bookshelf.books, false);\n    for (var i \u003d 0 ; i \u003c bookshelf.books.length ; i++) {\n      removeBook(bookshelf.books[i]); \n    }\n    unsubscribe();\n    db.remove(bookshelf);\n    user.deleteAllProperties();\n    return 1;\n  }\n  \n  return 0;\n}\n\nfunction getUser() {\n  var id \u003d PropertiesService.getUserProperties().getProperty(\"id\");\n  if (id) {\n    \n    convertUser();\n    //    return ScriptDb.getMyDb().load(id);\n    return ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\").load(id);\n  }\n  return null;\n}\n\nfunction convertUser() {\n  var id \u003d PropertiesService.getUserProperties().getProperty(\"id\");\n  if (id) {\n    if (!PropertiesService.getUserProperties().getProperty(\"converted\")) {\n      var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n      var user \u003d db.query({oldId: id}).next();\n      id \u003d user.getId();\n      PropertiesService.getUserProperties().setProperty(\"id\", id);\n      PropertiesService.getUserProperties().setProperty(\"converted\", 1);\n      user.converted \u003d 1;\n      db.save(user);\n      Logger.log(\"user \"+ id +\" converted\");\n    }\n  }\n}\n\nfunction getCategories() {\n  var id \u003d PropertiesService.getScriptProperties().getProperty(\"categories\") ;\n  \n  if (id \u003d\u003d null) {\n    return null;\n  }\n  var categories \u003d ParseDb.getMyDb(applicationId, restApiKey, \"list\").load(id);\n  return categories.list;\n}\n\nfunction updateAll() {\n//  var db \u003d ScriptDb.getMyDb();\n  var db \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  \n  var query \u003d db.query({});\n  \n  while (query.hasNext()) {\n    var book \u003d query.next();\n    Logger.log(book.title);\n    revertToGoogleData(book.getId());\n    Logger.log(\"reverted\");\n  }\n}"},{"id":"e334d359-d88f-4045-bdd3-26e7fcc75c62","name":"testers","type":"server_js","source":"function showUsers() {\n  var db \u003d ScriptDb.getMyDb();\n  var query \u003d db.query({type: \"bookshelf\"});\n  while (query.hasNext()) {\n    Logger.log(query.next()) ;\n  }\n  \n}\n\n\nfunction testAddBook() {\n//  var user \u003d Session.getEffectiveUser().getEmail();\n  var db \u003d ScriptDb.getMyDb();\n  \n  var book \u003d QueryGoogleBooks.test();\n  \n  addBookshelf(\"איתי\");\n  \n  \n  addNewBook(book);\n  showDb();\n}\n\nfunction testRemoveBook() {\n//  var user \u003d Session.getEffectiveUser().getEmail();\n  var db \u003d ScriptDb.getMyDb();\n \n  var book \u003d QueryGoogleBooks.test();\n  var query \u003d db.query({isbn:book.isbn});\n  if (query.hasNext()) {\n    book \u003d query.next(); \n  }\n  Logger.log(\"REMOVING BOOK \"+book.instances[0]);\n  removeBook(book.instances[0]);\n  showDb();\n}\n\nfunction testRemoveBookshelf() {\n  removeBookshelf();\n  showDb();\n}\n\nfunction testGetBookOwners() {\n  Logger.log(getBookOwners(\"S406466902252\"));\n}\n\nfunction clearDb() {\n  var db \u003d ScriptDb.getMyDb();\n  \n  var query \u003d db.query({});\n  while (query.hasNext()) {\n    db.remove(query.next()); \n  }\n  PropertiesService.getUserProperties().deleteAllProperties();\n  PropertiesService.getScriptProperties().deleteAllProperties();\n  showDb();\n}\n\nfunction testBooksInBookshelf() {\n  var user \u003d PropertiesService.getUserProperties().getProperty(\u0027id\u0027);\n  Logger.log(booksInBookshelf(user));\n}\n\nfunction testBooksInCategory() {\n  var category \u003d \"Adventure stories\";\n  Logger.log(booksInCategory(category));\n}\n\nfunction showDb() {\n  showUserProps();\n  var db \u003d ScriptDb.getMyDb();\n  var query \u003d db.query({});\n  while (query.hasNext()) {\n    var i \u003d query.next();\n    Logger.log(\"[\"+i.getId()+\"]\"+i.toJson());\n  }  \n}\n\nfunction showUserProps() {\n  var prop \u003d PropertiesService.getUserProperties();\n  Logger.log(prop.getProperties());\n}\n\nfunction clearUserProps() {\n   var prop \u003d PropertiesService.getUserProperties().deleteAllProperties();\n  Logger.log(prop.getProperties());\n}\nfunction showScriptProps() {\n  var prop \u003d PropertiesService.getScriptProperties();\n  Logger.log(prop.getProperties());\n}"},{"id":"3b51d99b-294a-440b-8867-a75caf9cf5d2","name":"notifications","type":"server_js","source":"function notify() {\n  var db \u003d ScriptDb.getMyDb();\n  \n  var users \u003d PropertiesService.getScriptProperties().getProperty(\"users-to-notify\");\n  if (!users) {\n    PropertiesService.getScriptProperties().setProperty(\"users-to-notify\", db.save({type: \"list#users-to-notify\", list: [], lastDate: (new Date()).getTime()}).getId());\n    var users \u003d PropertiesService.getScriptProperties().getProperty(\"users-to-notify\");\n  }\n  users \u003d db.load(users);\n  Logger.log(users);\n  for (var i \u003d 0 ; i \u003c users.list.length ; i++) {\n    var user \u003d db.load(users.list[i]);\n    \n    var html \u003d HtmlService.createTemplateFromFile(\"newbooks\");\n    //  html.category \u003d category;\n    \n    if (db.query({type: \"book#generic\", date: db.greaterThan(users.lastDate)}).getSize() \u003e 0) {\n      \n      html.lastDate \u003d users.lastDate;\n      //  html.lastDate \u003d 0;\n      \n      var message \u003d {\n        to: user.owner,\n        name: \"ספרות זולה\",\n        replyTo: \"kehilat.gvanim@gmail.com\",\n        subject: \"ספרים חדשים שהוספו למדף הספרים שלנו\",\n        htmlBody: html.evaluate().getContent()\n      }\n      \n      MailApp.sendEmail(message);\n    }\n    \n    \n    users.lastDate \u003d (new Date()).getTime();\n    db.save(users);\n  }\n}\n\nfunction subscribe() {\n  var user \u003d getUser();\n  var db \u003d ScriptDb.getMyDb();\n  \n  var users \u003d PropertiesService.getScriptProperties().getProperty(\"users-to-notify\");\n  if (!users) {\n    PropertiesService.getScriptProperties().setProperty(\"users-to-notify\", db.save({type: \"list#users-to-notify\", list: [], lastDate: (new Date()).getTime()}).getId());\n    var users \u003d PropertiesService.getScriptProperties().getProperty(\"users-to-notify\");\n  }\n  \n  users \u003d db.load(users);  \n  \n  for (var i \u003d 0 ; i \u003c users.list.length ; i++) {\n    if (users.list[i] \u003d\u003d user.getId()) {\n      return 0;\n    }\n  }\n  users.list.push(user.getId());\n  db.save(users);\n  Logger.log(users.list);\n  return 1;\n}\n\nfunction unsubscribe() {\n  var user \u003d getUser();\n  var db \u003d ScriptDb.getMyDb();\n  \n  var users \u003d PropertiesService.getScriptProperties().getProperty(\"users-to-notify\");\n  if (!users) {\n    return 0;\n  }\n  \n  users \u003d db.load(users);  \n  \n  for (var i \u003d 0 ; i \u003c users.list.length ; i++) {\n    if (users.list[i] \u003d\u003d user.getId()) {\n      var tmp \u003d users.list[0];\n      users.list[0] \u003d users.list[i];\n      users.list[i] \u003d tmp;\n      users.list.shift();\n      db.save(users);\n      Logger.log(users.list);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n\nfunction isSubscribed() {\n  var user \u003d getUser();\n  var db \u003d ScriptDb.getMyDb();\n  \n  var users \u003d PropertiesService.getScriptProperties().getProperty(\"users-to-notify\");\n  if (!users) {\n    return 0;\n  }\n  \n  users \u003d db.load(users);  \n  \n  for (var i \u003d 0 ; i \u003c users.list.length ; i++) {\n    if (users.list[i] \u003d\u003d user.getId()) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\n\nfunction deleteNotifications() {\n  if (PropertiesService.getScriptProperties().getProperty(\"users-to-notify\")) {\n    var db \u003d ScriptDb.getMyDb();\n    var users \u003d db.load(PropertiesService.getScriptProperties().getProperty(\"users-to-notify\"));\n    db.remove(users);\n    PropertiesService.getScriptProperties().deleteProperty(\"users-to-notify\");\n  }\n}"},{"id":"74c4d1ee-a0b8-4aec-8780-71a2da5c155f","name":"newbooks","type":"html","source":"\u003cdiv dir\u003d\"rtl\"\u003e\n\u003ch1\u003eהספרים שהוספו לאחרונה למדף הספרים:\u003c/h1\u003e\n\u003c? var db \u003d ScriptDb.getMyDb() ?\u003e\n\u003c? var books \u003d db.query({type: \"book#generic\", date: db.greaterThan(lastDate)}).sortBy(\u0027date\u0027, db.DESCENDING) ?\u003e\n\n\u003cp align\u003d\"left\"\u003e\u003c?\u003d books.getSize() ?\u003e ספרים\u003c/p\u003e\n\u003ctable border\u003d\"0\" width\u003d\"100%\"\u003e\n\u003c? var maxBooksInLine \u003d 5 ?\u003e\n\n\u003ctr\u003e\u003c? for (var i \u003d 0 ; i \u003c maxBooksInLine ; i++) { ?\u003e\u003ctd width\u003d\"\u003c?\u003d100/maxBooksInLine ?\u003e%\"\u003e\u003c/td\u003e\u003c? } ?\u003e\u003c/tr\u003e\n\u003ctr\u003e\n\u003c? var booksInLine \u003d 0 ?\u003e\n\u003c? while (books.hasNext()) { ?\u003e\n\u003c? if (booksInLine \u003d\u003d maxBooksInLine) { ?\u003e\n\u003c/tr\u003e\u003ctr\u003e\u003c?booksInLine \u003d 0 }?\u003e\n\u003c? var book \u003d books.next() ?\u003e\n\n\n\u003ctd align\u003d\"center\" valign\u003d\"top\"\u003e\u003ca href\u003d\"https://sites.google.com/site/kehilagimel/pulpfiction?book\u003d\u003c?\u003d book.getId() ?\u003e\"\u003e\n\u003c? if (book.cover \u0026\u0026 book.cover.smallThumbnail) { ?\u003e\n\u003cimg src\u003d\"\u003c?\u003dbook.cover.smallThumbnail?\u003e\"\u003e\u003cbr\u003e\n\u003c? } else { ?\u003e\n\u003cimg src\u003d\"http://books.google.co.il/googlebooks/images/no_cover_thumb.gif\"\u003e\u003cbr\u003e\n\u003c? } ?\u003e\n\u003cb\u003e\u003c?\u003dbook.title?\u003e\u003c/b\u003e\u003cbr\u003e\n\u003c? if (book.authors) { ?\u003e\n\u003c? for (var j \u003d 0 ; j \u003c book.authors.length ; j++) { ?\u003e\n\u003c?\u003d book.authors[j] ?\u003e \u003cbr\u003e \u003c? } ?\u003e\n\u003c? } ?\u003e\n\u003c/a\u003e\u003c/td\u003e\n\u003c? booksInLine++ ?\u003e\n\n\n\u003c? } ?\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/div\u003e"},{"id":"c2a8c16a-8e08-45fd-9c93-21afd1eca74b","name":"parse.com vars","type":"server_js","source":"var applicationId \u003d \"bXrO3AZ32iiX7pcjLeNhaMzvJdBo3grZy1x87TnB\";\nvar restApiKey \u003d \"YmGpfIK5Sgx79CaLVwcEZsxmK5fuhp822Jau1SKD\";\n"},{"id":"772a7e05-6c40-4c1a-a4f9-eaa0016b74b5","name":"converter","type":"server_js","source":"function convertToParse() {\n  \n  clearDb();\n  Utilities.sleep(1000);\n  \n  convertBookshelf();\n  Utilities.sleep(1000);\n  convertCategories();\n  Utilities.sleep(1000);\n  convertGeneric();\n  Utilities.sleep(1000);\n  convertInstance();\n  \n  Logger.log(\"done converting\");\n}\n\nfunction fixAll() {\n  fixBookshelf();\n  Utilities.sleep(2000);\n  fixGeneric();\n  Utilities.sleep(2000);\n  fixInstance();\n  \n  Logger.log(\"done fixing\");\n}\n\nfunction fixBookshelf() {\n  var type1 \u003d \"bookshelf\";\n  var type2 \u003d \"bookshelf\";\n  \n  var dbShelf \u003d ParseDb.getMyDb(applicationId, restApiKey, type2);\n  var query \u003d dbShelf.query({});\n  \n  while (query.hasNext()) {\n    var obj \u003d query.next();\n    \n//    Logger.log(\"fixing \"+obj.name);\n    \n    var oldInst \u003d obj.instances;\n    var oldGen \u003d obj.books;\n    \n    var newInst \u003d  [];\n    var newGen \u003d [];\n    \n    var dbInst \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n//    Logger.log(oldInst);\n    for (var i \u003d 0 ; i \u003c oldInst.length ; i++) {\n      newInst.push(dbInst.query({oldId: oldInst[i]}).next().getId());\n      Utilities.sleep(1000);\n    }\n//    Logger.log(newInst);\n    var dbGen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n//    Logger.log(oldGen);\n    for (var i \u003d 0 ; i \u003c oldGen.length ; i++) {\n      newGen.push(dbGen.query({oldId: oldGen[i]}).next().getId());\n      Utilities.sleep(1000);\n    }\n//    Logger.log(newGen);\n    obj.instances \u003d newInst;\n    obj.books \u003d newGen;\n    \n    dbShelf.save(obj);\n  }\n  \n  Logger.log(\"fixed \"+type1);\n}\n\n\nfunction fixGeneric() {\n  var type1 \u003d \"book#generic\";\n  var type2 \u003d \"book_generic\";\n  \n  var dbGen \u003d ParseDb.getMyDb(applicationId, restApiKey, type2);\n  var query \u003d dbGen.query({});\n  \n  while (query.hasNext()) {\n    var obj \u003d query.next();\n    \n//    Logger.log(\"fixing \"+obj.name);\n    \n    var oldInst \u003d obj.instances;\n    \n    var newInst \u003d  [];\n    \n    var dbInst \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n//    Logger.log(oldInst);\n    for (var i \u003d 0 ; i \u003c oldInst.length ; i++) {\n      newInst.push(dbInst.query({oldId: oldInst[i]}).next().getId());\n      Utilities.sleep(1000);\n    }\n//    Logger.log(newInst);\n    obj.instances \u003d newInst;\n    \n    dbGen.save(obj);\n  }\n  \n  Logger.log(\"fixed \"+type1);\n}\n\nfunction fixInstance() { \n  var type1 \u003d \"book#instance\";\n  var type2 \u003d \"book_instance\";\n  \n  var dbInst \u003d ParseDb.getMyDb(applicationId, restApiKey, type2);\n  var query \u003d dbInst.query({});\n  \n  while (query.hasNext()) {\n    Utilities.sleep(1000);\n\n    var obj \u003d query.next();\n    \n//    Logger.log(\"fixing \"+obj.toJson());\n    \n    var oldId \u003d obj.generic;\n    var oldOwner \u003d obj.owner;\n    var oldHolder \u003d obj.holder;\n    \n    var newId;\n    var newOwner;\n    var newHolder;\n    \n    var dbGen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n//    Logger.log(oldInst);\n      newId \u003d dbGen.query({oldId: oldId}).next().getId();\n//    Logger.log(newInst);\n    var dbShelf \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n//    Logger.log(oldGen);\n    newOwner \u003d dbShelf.query({oldId: oldOwner}).next().getId();\n    newHolder \u003d dbShelf.query({oldId: oldHolder}).next().getId();\n//    Logger.log(newGen);\n    obj.generic \u003d newId;\n    obj.owner \u003d newOwner;\n    obj.holder \u003d newHolder;\n    \n    dbInst.save(obj);\n  }\n  \n  Logger.log(\"fixed \"+type1);\n}\n\n\nfunction convertBookshelf() {\n  var type1 \u003d \"bookshelf\";\n  var type2 \u003d \"bookshelf\";\n  \n  var old \u003d ScriptDb.getMyDb().query({type: type1});\n  var fresh \u003d ParseDb.getMyDb(applicationId, restApiKey, type2);\n  \n  while (old.hasNext()) {\n    var obj \u003d old.next();\n    \n    fresh.save({\n      oldId: obj.getId(),\n      owner: obj.owner,\n      instances: obj.instances,\n      books: obj.books,\n      name: obj.name\n    });\n  }\n  \n  Logger.log(\"coverted \"+type1);\n}\n\nfunction convertCategories() {\n  var type1 \u003d \"list#categories\";\n  var type2 \u003d \"list\";\n  \n  var obj \u003d ScriptDb.getMyDb().query({type: type1}).next();\n  var fresh \u003d ParseDb.getMyDb(applicationId, restApiKey, type2);\n  \n  obj \u003d fresh.save({\n    oldId: obj.getId(),\n    type: \"categories\",\n    list: obj.list\n  });\n  \n  PropertiesService.getScriptProperties().setProperty(\"categories\", obj.getId());\n  \n  Logger.log(\"coverted \"+type1);\n}\n\nfunction convertGeneric() {\n  var type1 \u003d \"book#generic\";\n  var type2 \u003d \"book_generic\";\n  \n  var old \u003d ScriptDb.getMyDb().query({type: type1});\n  var fresh \u003d ParseDb.getMyDb(applicationId, restApiKey, type2);\n  \n  while (old.hasNext()) {\n    var obj \u003d old.next();\n//    try {\n    fresh.save({\n      oldId: obj.getId(),\n      gbid: obj.gbid,\n      title: obj.title,\n      authors: obj.authors,\n      category: obj.category,\n      description: obj.description,\n      isbn: obj.isbn,\n      pages: parseInt(obj.pages),\n      language: obj.language,\n      cover: obj.cover,\n      instances: obj.instances,\n      date: obj.date\n    });\n//    } catch (error) {\n//      Logger.log(obj.toJson());\n//  }\n  }\n  \n  Logger.log(\"coverted \"+type1);\n}\n\nfunction convertInstance() {\n  var type1 \u003d \"book#instance\";\n  var type2 \u003d \"book_instance\";\n  \n  var old \u003d ScriptDb.getMyDb().query({type: type1});\n  var fresh \u003d ParseDb.getMyDb(applicationId, restApiKey, type2);\n  \n  while (old.hasNext()) {\n    var obj \u003d old.next();\n    \n    var genId \u003d obj.id;\n    \n    fresh.save({\n      oldId: obj.getId(),\n      generic: genId,\n      owner: obj.owner,\n      holder: obj.holder,\n      queue: obj.queue\n    });\n  }\n  \n  Logger.log(\"coverted \"+type1);\n}\n\n\nfunction clearDb() {\n  var dbShelf \u003d ParseDb.getMyDb(applicationId, restApiKey, \"bookshelf\");\n  var dbGen \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_generic\");\n  var dbInst \u003d ParseDb.getMyDb(applicationId, restApiKey, \"book_instance\");\n  var dbList \u003d ParseDb.getMyDb(applicationId, restApiKey, \"list\");\n  \n  Utilities.sleep(1000);\n  var query \u003d dbShelf.query({});\n  while (query.hasNext()) {\n    dbShelf.remove(query.next()); \n  }\n  \n  Utilities.sleep(1000);\n  query \u003d dbGen.query({});\n  while (query.hasNext()) {\n    dbGen.remove(query.next()); \n  }\n  \n  Utilities.sleep(1000);\n  query \u003d dbInst.query({});\n  while (query.hasNext()) {\n    dbInst.remove(query.next()); \n  }\n  \n  Utilities.sleep(1000);\n  query \u003d dbList.query({});\n  while (query.hasNext()) {\n    dbList.remove(query.next()); \n  }\n  \n  Logger.log(\"db cleared\");\n}\n\n/**\n* Exports the contents of the ScriptDB database to a series of JSON files.\n* Each export has its own folder, and the files in that folder contain the\n* JSON equivalents of each record, one record per line. If the export\n* function times out before it can complete, this function throws an error\n* instructing you to run the function again so that it can pick up where it\n* left off.\n*/\n/**\nfunction exportScriptDb() {\n  // The name of the folder to export to. Change as needed.\n  var EXPORT_FOLDER_NAME \u003d \u0027Export-\u0027 + new Date().toISOString();\n  \n  // The name of the property that holds the next page number to export.\n  var PAGE_NUMBER_PROPERTY \u003d \u0027scriptDbExport.pageNumber\u0027;\n  \n  // The name of the property that holds the ID of the folder to export to.\n  var FOLDER_ID_PROPERTY \u003d \u0027scriptDbExport.folderId\u0027;\n  \n  // The amount of time, in milliseconds, that the script can run for before\n  // it is stopped (5 minutes).\n  var TIMEOUT_MS \u003d 5 * 60 * 1000;\n  \n  // The number of records to export to a single file.\n  var PAGE_SIZE \u003d 1000;\n  \n  var properties \u003d PropertiesService.getScriptProperties();\n  \n  var folderId \u003d properties.getProperty(FOLDER_ID_PROPERTY);\n  var folder;\n  if (folderId) {\n    folder \u003d DriveApp.getFolderById(folderId);\n  } else {\n    folder \u003d DriveApp.createFolder(EXPORT_FOLDER_NAME);\n    properties.setProperty(FOLDER_ID_PROPERTY, folder.getId());\n  }\n  \n  var pageNumber \u003d properties.getProperty(PAGE_NUMBER_PROPERTY) || 0;\n  var db \u003d ScriptDb.getMyDb();\n  var now \u003d new Date();\n  var finished \u003d false;\n  \n  for (var start \u003d new Date().getTime(); now - start \u003c TIMEOUT_MS;\n       now \u003d new Date()) {\n    var page \u003d db.query({}).paginate(pageNumber, PAGE_SIZE);\n    if (page.getSize() \u003d\u003d 0) {\n      finished \u003d true;\n      break;\n    }\n    var results \u003d [];\n    while (page.hasNext()) {\n      var item \u003d page.next();\n      results.push(item.toJson());\n    }\n    var content \u003d results.join(\u0027\\n\u0027);\n    var fileName \u003d Utilities.formatString(\u0027part-%03d.json\u0027, pageNumber);\n    folder.createFile(fileName, content, \u0027application/json\u0027);\n    pageNumber++;\n    properties.setProperty(PAGE_NUMBER_PROPERTY, pageNumber);\n  }\n  if (finished) {\n    Logger.log(\u0027Export complete\u0027);\n    properties.deleteProperty(FOLDER_ID_PROPERTY);\n    properties.deleteProperty(PAGE_NUMBER_PROPERTY);\n  } else {\n    throw \u0027Export timed out. Run the function again to continue.\u0027;\n  }\n}\n*/"}]}